From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: John Doe <john.doe@somewhere.on.planet>
Date: Mon, 13 May 2024 10:43:52 +0800
Subject: Patching kernel rk35xx files
 drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c

Signed-off-by: John Doe <john.doe@somewhere.on.planet>
---
 drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c | 53 ++++++----
 1 file changed, 34 insertions(+), 19 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
index 28bdf6f2b54b..81cfc72c8e0e 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-rk.c
@@ -26,13 +26,16 @@
 #include <linux/pm_runtime.h>
 #include <linux/soc/rockchip/rk_vendor_storage.h>
 #include <soc/rockchip/rockchip_csu.h>
 #include "stmmac_platform.h"
 #include "dwmac-rk-tool.h"
+#include <asm/system_info.h>
 
 #define MAX_ETH		2
 
+static int dev_num = 0;
+
 struct rk_priv_data;
 struct rk_gmac_ops {
 	void (*set_to_rgmii)(struct rk_priv_data *bsp_priv,
 			     int tx_delay, int rx_delay);
 	void (*set_to_rmii)(struct rk_priv_data *bsp_priv);
@@ -2809,10 +2812,34 @@ int dwmac_rk_get_phy_interface(struct stmmac_priv *priv)
 
 	return bsp_priv->phy_iface;
 }
 EXPORT_SYMBOL(dwmac_rk_get_phy_interface);
 
+/*
+ * Create an ethernet address from the system serial number.
+ */
+static int __init etherm_addr(char *addr)
+{
+	unsigned int serial;
+
+	if (system_serial_low == 0 && system_serial_high == 0)
+		return -ENODEV;
+
+	serial = system_serial_low | system_serial_high;
+
+	addr[0] = 0;
+	addr[1] = 0;
+	addr[2] = 0xa4;
+	addr[3] = 0x10 + (serial >> 24);
+	addr[4] = serial >> 16;
+	addr[5] = (serial >> 8) + dev_num;
+
+	dev_num++;
+
+	return 0;
+}
+
 static void rk_get_eth_addr(void *priv, unsigned char *addr)
 {
 	struct rk_priv_data *bsp_priv = priv;
 	struct device *dev = &bsp_priv->pdev->dev;
 	unsigned char ethaddr[ETH_ALEN * MAX_ETH] = {0};
@@ -2825,30 +2852,18 @@ static void rk_get_eth_addr(void *priv, unsigned char *addr)
 		dev_err(dev, "%s: Invalid ethernet bus id %d\n", __func__, id);
 		return;
 	}
 
 	ret = rk_vendor_read(LAN_MAC_ID, ethaddr, ETH_ALEN * MAX_ETH);
-	if (ret <= 0 ||
-	    !is_valid_ether_addr(&ethaddr[id * ETH_ALEN])) {
-		dev_err(dev, "%s: rk_vendor_read eth mac address failed (%d)\n",
-			__func__, ret);
-		eth_random_addr(&ethaddr[id * ETH_ALEN]);
-		memcpy(addr, &ethaddr[id * ETH_ALEN], ETH_ALEN);
-		dev_err(dev, "%s: generate random eth mac address: %pM\n", __func__, addr);
-
-		ret = rk_vendor_write(LAN_MAC_ID, ethaddr, ETH_ALEN * MAX_ETH);
-		if (ret != 0)
-			dev_err(dev, "%s: rk_vendor_write eth mac address failed (%d)\n",
-				__func__, ret);
-
-		ret = rk_vendor_read(LAN_MAC_ID, ethaddr, ETH_ALEN * MAX_ETH);
-		if (ret != ETH_ALEN * MAX_ETH)
-			dev_err(dev, "%s: id: %d rk_vendor_read eth mac address failed (%d)\n",
-				__func__, id, ret);
-	} else {
+ 	if (ret <= 0 ||
+ 	    !is_valid_ether_addr(&ethaddr[id * ETH_ALEN])) {
+		etherm_addr(&ethaddr[id * ETH_ALEN]);
 		memcpy(addr, &ethaddr[id * ETH_ALEN], ETH_ALEN);
-	}
+		dev_err(dev, "%s: use serial to generate eth mac address: %pM\n", __func__, addr);
+ 	} else {
+ 		memcpy(addr, &ethaddr[id * ETH_ALEN], ETH_ALEN);
+ 	}
 
 out:
 	dev_err(dev, "%s: mac address: %pM\n", __func__, addr);
 }
 
-- 
Created with Armbian build tools https://github.com/armbian/build

